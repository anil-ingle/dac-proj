package com.dac.onlineparking.module.login;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;

import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.dac.onlineparking.module.exception.OnlineParkingGlobalException;

@RestController
public class LoginController {

	@Autowired
	private LoginService loginService;
	@Autowired
	private JavaMailSender sender;

	Random rnd = new Random();
	Map<String, Integer> emailCode = new HashMap<String, Integer>();
	Map<Integer, String> verify = new HashMap<Integer, String>();

	@RequestMapping(path = "mvc/login", method = RequestMethod.GET)
	public @ResponseBody LoginVO login(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String userName = request.getParameter("un");
		String password = request.getParameter("password");
		HttpSession sess = request.getSession(true);
		LoginStatusVO user = loginService.login(userName, password);
		try {

			if (user.isStatus()) {
				sess.setAttribute("user", user.getLoginVO());
				return user.getLoginVO();
			} else {
				sess.invalidate();

				throw new OnlineParkingGlobalException(user.getMessage());
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new OnlineParkingGlobalException(user.getMessage());
		}
	}

	@RequestMapping(value = "mvc/logout", method = RequestMethod.GET)
	public @ResponseBody boolean logout(HttpServletRequest request, HttpServletResponse response) {
		HttpSession sess = request.getSession(false);
		if (sess != null) {
			sess.invalidate();
		}
		return true;
	}

	/*
	 * 1111 is Success. 1112 is Mail not Found. 1113 is Error while sending mail
	 */
	@RequestMapping("/sendMail")
	public String sendMail(@RequestParam("email") String email) {
		if (loginService.isEmailValid(email)) {
			MimeMessage message = sender.createMimeMessage();
			MimeMessageHelper helper = new MimeMessageHelper(message);
			int code = 100000 + rnd.nextInt(900000);
			try {
				emailCode.put(email, code);
				verify.put(code, email);
				helper.setTo(email);
				helper.setText("We received a request to reset your OnlinePaking password.");
				helper.setText("Your reset code is ." + code);
				helper.setSubject("is your Online Parking account recovery code");
			} catch (MessagingException e) {
				e.printStackTrace();
				// here error code 1113 is Eoor while Sending Mail.
				return "1113.";
			}
			sender.send(message);
			// here success code is 1111 means mail send successfuly.
			return "1111";
		} else {
			// here return 1112 means Mail Not Found
			return "1112";
		}

	}

	@RequestMapping("/validateOtp")
	public Boolean validateOtp(@RequestParam("otp") Integer otp) {
		if (verify.containsKey(otp)) {
			String email = verify.get(otp);
			Integer mapOtp = emailCode.get(email);
			if (mapOtp == otp) {
				emailCode.remove(verify.get(otp));
				verify.remove(otp);
				return true;
			} else
				return false;
		} else
			return false;
	}
}